require('dotenv').config();
const express = require('express');
const Database = require('better-sqlite3');  // „Åæ„Åü„ÅØ require('sqlite3').verbose();
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// SQLite „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
const db = new Database('hiroyuki.db');  // SQLite„Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê

// „Çµ„Éº„Éê„Éº„ÉÜ„Çπ„ÉàÁî®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/', (req, res) => {
    res.send('„Å≤„Çç„ÇÜ„Åç„É©„É≥„Ç≠„É≥„Ç∞API Âãï‰Ωú‰∏≠');
});

// „Éù„Éº„ÉàË®≠ÂÆö
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));


// üìå „É©„É≥„Ç≠„É≥„Ç∞„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„ÇãAPI
app.get('/api/ranking', (req, res) => {
    try {
        console.log("üì° /api/ranking „Å´„É™„ÇØ„Ç®„Çπ„Éà„ÅåÊù•„ÅüÔºÅ");

        const sort = req.query.sort || "cut_count"; // „Éá„Éï„Ç©„É´„Éà„ÅØÂàá„ÇäÊäú„ÅçÂõûÊï∞È†Ü

        let orderBy = "COUNT(cvm.cut_video_id) DESC";
        if (sort === "newest") orderBy = "v.published_at DESC";
        if (sort === "oldest") orderBy = "v.published_at ASC";
        if (sort === "cut_rate") orderBy = "(COUNT(cvm.cut_video_id) / (JULIANDAY('now') - JULIANDAY(v.published_at))) DESC";

        const ranking = db.prepare(`
            SELECT v.video_id, v.title, COUNT(cvm.cut_video_id) AS cut_count, v.published_at
            FROM videos v
            LEFT JOIN cut_video_matches cvm ON v.video_id = cvm.original_video_id
            GROUP BY v.video_id
            ORDER BY ${orderBy}
            LIMIT 10
        `).all();

        console.log("‚úÖ „ÇØ„Ç®„É™ÁµêÊûú:", ranking);
        res.json(ranking);
    } catch (error) {
        console.error("‚ùå „Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", error);
        res.status(500).json({ error: "„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº", details: error.message });
    }
});



// üìå ÁâπÂÆö„ÅÆÂÖÉÂãïÁîª„Å´Á¥ê„Å•„ÅèÂàá„ÇäÊäú„ÅçÂãïÁîª„ÇíÂèñÂæó
app.get('/api/original/:videoId', (req, res) => {
    try {
        const { videoId } = req.params;
        const cutVideos = db.prepare(`
            SELECT cv.cut_video_id, cv.title
            FROM cut_videos cv
            INNER JOIN cut_video_matches cvm ON cv.cut_video_id = cvm.cut_video_id
            WHERE cvm.original_video_id = ?
        `).all(videoId);

        res.json(cutVideos);
    } catch (error) {
        res.status(500).json({ error: "„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº" });
    }
});
